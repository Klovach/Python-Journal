'''
Rather than iterating through the numbers from 1 to N, we can use a formula to calculate the sum of all the numbers from 1 to N. 
The formula is N * (N + 1) / 2. This is a common interview question that can be solved simply in one line. 
'''
from ast import List


N = int(input())
res = (N * (N + 1)) / 2
print(res)

'''
 Return the number of ways you can write n as the sum of consecutive positive integers.
'''

# Brute Force Solution
def consecutiveNumbersSum(self, n: int) -> int:
    count = 0
    for i in range(1, n + 1):
        sum = 0
        for j in range(i, n + 1):
            sum += j
            if sum == n:
                count += 1
            if sum > n:
                break
    return count

# Optimized Solution
def consecutiveNumbersSum2(self, n: int) -> int:
    count = 0
    upper_limit = int((2 * n + 0.25) ** 0.5 - 0.5) + 1

    for k in range(1, upper_limit):
        numerator = n - (k * (k + 1) // 2)
        if numerator % k == 0:
            count += 1

    return count

# Find Three Consecutive Integers That Sum to a Given Number
def findConsecutiveSum(n: int) -> List[int]:
    result = []
    
    for a in range(1, n - 1):
        remaining_sum = n - a
        for b in range(1, remaining_sum):
            c = remaining_sum - b
            result.append([a, b, c])

    return result

# Find Sum of Three : Note That This Could Also Be Written With A Lambda Function
def sumOfThree(self, num: int) -> List[int]:
        if num % 3 == 0:
            return [num//3-1, num//3, num//3+1]
        else:
             return []